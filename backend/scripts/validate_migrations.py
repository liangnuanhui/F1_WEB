#!/usr/bin/env python3
"""
迁移一致性验证脚本
检查模型定义与数据库实际结构是否一致
"""
import os
import sys
import tempfile
from pathlib import Path

# 添加项目根目录到Python路径
backend_dir = Path(__file__).parent.parent
sys.path.insert(0, str(backend_dir))

def validate_migrations():
    """验证迁移一致性"""
    print("🔍 检查模型与数据库一致性...")

    # 检查是否有数据库URL
    if not os.getenv('DATABASE_URL'):
        print("❌ 错误: 请设置DATABASE_URL环境变量")
        return False

    # 生成临时迁移文件检查是否有差异
    import subprocess
    try:
        result = subprocess.run([
            'poetry', 'run', 'alembic', 'revision',
            '--autogenerate', '-m', 'temp_validation_check'
        ], cwd=backend_dir, capture_output=True, text=True)

        if result.returncode != 0:
            print(f"❌ Alembic命令失败: {result.stderr}")
            return False

        # 查找生成的迁移文件
        versions_dir = backend_dir / 'alembic' / 'versions'
        migration_files = list(versions_dir.glob('*temp_validation_check.py'))

        if not migration_files:
            print("❌ 未找到生成的迁移文件")
            return False

        migration_file = migration_files[0]

        # 检查迁移文件内容
        with open(migration_file, 'r', encoding='utf-8') as f:
            content = f.read()

        # 删除临时迁移文件
        migration_file.unlink()

        # 检查是否只包含pass语句
        if '# ### commands auto generated by Alembic' in content:
            # 检查upgrade和downgrade函数中是否只有pass
            lines = content.split('\n')
            upgrade_has_content = False
            downgrade_has_content = False

            in_upgrade = False
            in_downgrade = False

            for line in lines:
                stripped = line.strip()

                if 'def upgrade()' in line:
                    in_upgrade = True
                    in_downgrade = False
                    continue
                elif 'def downgrade()' in line:
                    in_upgrade = False
                    in_downgrade = True
                    continue
                elif stripped.startswith('def ') and stripped != 'def upgrade()' and stripped != 'def downgrade()':
                    in_upgrade = False
                    in_downgrade = False
                    continue

                # 检查函数体中是否有实际的DDL操作
                if in_upgrade and stripped and not stripped.startswith('#') and stripped != 'pass' and '# ### end Alembic commands ###' not in stripped and '"""' not in stripped:
                    upgrade_has_content = True

                if in_downgrade and stripped and not stripped.startswith('#') and stripped != 'pass' and '# ### end Alembic commands ###' not in stripped and '"""' not in stripped:
                    downgrade_has_content = True

            if not upgrade_has_content and not downgrade_has_content:
                print("✅ 模型与数据库结构完全一致！")
                return True

        print("⚠️  检测到模型与数据库结构不一致!")
        print("📝 生成的迁移文件内容:")
        print("-" * 50)
        print(content)
        print("-" * 50)
        return False

    except Exception as e:
        print(f"❌ 验证过程出错: {e}")
        return False

def check_env_imports():
    """检查env.py是否导入了所有模型"""
    print("🔍 检查env.py模型导入...")

    env_file = backend_dir / 'alembic' / 'env.py'
    models_init = backend_dir / 'app' / 'models' / '__init__.py'

    # 读取models/__init__.py中的所有模型
    with open(models_init, 'r', encoding='utf-8') as f:
        models_content = f.read()

    # 提取__all__中的模型名
    import ast
    tree = ast.parse(models_content)
    all_models = []

    for node in ast.walk(tree):
        if isinstance(node, ast.Assign):
            for target in node.targets:
                if isinstance(target, ast.Name) and target.id == '__all__':
                    if isinstance(node.value, ast.List):
                        for elt in node.value.elts:
                            if isinstance(elt, ast.Str):
                                all_models.append(elt.s)
                            elif isinstance(elt, ast.Constant):
                                all_models.append(elt.value)

    # 读取env.py内容
    with open(env_file, 'r', encoding='utf-8') as f:
        env_content = f.read()

    # 检查是否导入了所有模型
    missing_imports = []
    for model in all_models:
        if model == 'Base':  # Base已经单独导入
            continue
        if model not in env_content:
            missing_imports.append(model)

    if missing_imports:
        print(f"❌ env.py缺少以下模型导入: {missing_imports}")
        return False
    else:
        print("✅ env.py已导入所有模型！")
        return True

if __name__ == '__main__':
    print("🚀 开始迁移一致性验证...")
    print()

    # 检查env.py导入
    env_ok = check_env_imports()
    print()

    # 检查迁移一致性
    migration_ok = validate_migrations()
    print()

    if env_ok and migration_ok:
        print("🎉 所有检查通过！模型与迁移完全一致。")
        sys.exit(0)
    else:
        print("❌ 发现问题，请修复后重新验证。")
        sys.exit(1)